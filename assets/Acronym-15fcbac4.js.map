{"version":3,"mappings":"sVAIM,MAAAA,EAAeC,EAAI,EAAE,EACrBC,EAAaD,EAAI,EAAK,EACtBE,EAAgBF,EAAI,EAAE,EAGxB,IAAAG,EACAC,EAAc,GAElB,eAAeC,GAAc,CACtB,gBAAU,UAAU,UAAUD,CAAW,CAChD,CAEA,SAASE,GAAuB,CAC3B,IAACP,EAAa,MACjB,OAGD,MAAMQ,EAAgBR,EAAa,MAAM,KAAO,UAAQ,KAAM,EAAE,EAE1DS,EADmB,cACoB,KAAKD,CAAa,EAE/D,OAAQ,GAAM,CACb,KAAKA,EAAc,OAAS,EAC3BN,EAAW,MAAQ,GACnBC,EAAc,MAAQ,wCACtB,OAED,IAAK,CAACM,EACLP,EAAW,MAAQ,GACnBC,EAAc,MAAQ,kCAEvB,QACCE,EAAcK,EAA4BF,CAAa,EACvDN,EAAW,MAAQ,GACnBC,EAAc,MAAQE,CACxB,CACD,CAEA,SAASK,EAA4BC,EAAiB,CAGrD,OAFwBA,EAAQ,YAAY,EAAE,MAAM,EAAE,EAE/B,OACtB,CAACC,EAAuBC,IAA0B,CACjD,MAAMC,EAAc,KAAK,MACxB,KAAK,OAAW,EAAAV,EAAMS,CAAa,EAAE,QAEtC,MAAO,GAAGD,CAAa,IAAIR,EAAMS,CAAa,EAAEC,CAAW,CAAC,EAC7D,EACA,GAEF,CAEA,OAAAC,EAAU,SAAY,CACjB,IACH,KAAM,CAAE,QAASC,CAAiB,QAAAC,EAAA,IAAM,OACvC,4BACD,MACQb,EAAAY,OACO,CACf,QAAQ,MAAM,kCAAkC,CACjD,EACA","names":["acronymInput","ref","showButton","textToDisplay","words","acronymText","copyAcronym","acronymButtonPressed","massagedInput","containsOnlyLetters","getWordsFromProvidedAcronym","acronym","previousValue","currentLetter","randomIndex","onMounted","acronymWords","__vitePreload"],"sources":["../../src/pages/Acronym.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { ref, onMounted } from 'vue'\n\n// Public\nconst acronymInput = ref('')\nconst showButton = ref(false)\nconst textToDisplay = ref('')\n\n// Private\nlet words: Record<string, string[]>\nlet acronymText = ''\n\nasync function copyAcronym() {\n\tawait navigator.clipboard.writeText(acronymText)\n}\n\nfunction acronymButtonPressed() {\n\tif (!acronymInput.value) {\n\t\treturn\n\t}\n\n\tconst massagedInput = acronymInput.value.trim().replace(/ /g, '')\n\tconst lettersOnlyRegex = /^[a-zA-Z]+$/\n\tconst containsOnlyLetters = lettersOnlyRegex.test(massagedInput)\n\n\tswitch (true) {\n\t\tcase massagedInput.length < 1:\n\t\t\tshowButton.value = false\n\t\t\ttextToDisplay.value = 'There can not be spaces in the input.'\n\t\t\treturn\n\n\t\tcase !containsOnlyLetters:\n\t\t\tshowButton.value = false\n\t\t\ttextToDisplay.value = 'You can only input letters A-Z.'\n\n\t\tdefault:\n\t\t\tacronymText = getWordsFromProvidedAcronym(massagedInput)\n\t\t\tshowButton.value = true\n\t\t\ttextToDisplay.value = acronymText\n\t}\n}\n\nfunction getWordsFromProvidedAcronym(acronym: string) {\n\tconst massagedAcronym = acronym.toLowerCase().split('')\n\n\treturn massagedAcronym.reduce(\n\t\t(previousValue: string, currentLetter: string) => {\n\t\t\tconst randomIndex = Math.floor(\n\t\t\t\tMath.random() * words[currentLetter].length\n\t\t\t)\n\t\t\treturn `${previousValue} ${words[currentLetter][randomIndex]}`\n\t\t},\n\t\t''\n\t)\n}\n\nonMounted(async () => {\n\ttry {\n\t\tconst { default: acronymWords } = await import(\n\t\t\t'../assets/acronymWords.json'\n\t\t)\n\t\twords = acronymWords\n\t} catch (error) {\n\t\tconsole.error('You need to update your browser.')\n\t}\n})\n</script>\n\n<template>\n\t<div class=\"tw-flex-col-center gap-4\">\n\t\t<h1 class=\"mt-4 tw-h1\">Acronym Generator</h1>\n\n\t\t<div class=\"flex gap-4\">\n\t\t\t<input\n\t\t\t\tv-model=\"acronymInput\"\n\t\t\t\tclass=\"tw-input\"\n\t\t\t\tplaceholder=\"Type a word here\"\n\t\t\t\t@keyup.enter=\"acronymButtonPressed\"\n\t\t\t/>\n\t\t\t<button class=\"tw-button w-24\" @click=\"acronymButtonPressed\">\n\t\t\t\tGenerate\n\t\t\t</button>\n\t\t</div>\n\n\t\t<div class=\"tw-flex-col-center gap-4\">\n\t\t\t<div class=\"capitalize\">{{ textToDisplay }}</div>\n\t\t\t<button v-if=\"showButton\" class=\"tw-button w-24\" @click=\"copyAcronym\">\n\t\t\t\tCopy\n\t\t\t</button>\n\t\t</div>\n\t</div>\n</template>\n"],"file":"assets/Acronym-15fcbac4.js"}
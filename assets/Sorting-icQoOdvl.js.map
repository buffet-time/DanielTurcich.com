{"version":3,"file":"Sorting-icQoOdvl.js","sources":["../../src/pages/sorting/mergeSort.ts","../../src/pages/sorting/quickSort.ts","../../src/pages/sorting/combSort.ts","../../src/pages/sorting/SortingVisualization.vue","../../src/pages/Sorting.vue"],"sourcesContent":["import type { SortingRect, SortingVisualizationProps } from '#types'\n\nexport async function startMergeSort(\n\talgorithm: SortingVisualizationProps,\n\tsortingArray: SortingRect[],\n\teraseRectangleByObject: (rect: SortingRect) => void,\n\tredrawRectangle: (index: number) => Promise<void>\n): Promise<void> {\n\t// Less efficient and slightly modified to handle drawing properly\n\tasync function mergeSort(\n\t\tsortingArray: SortingRect[]\n\t): Promise<SortingRect[]> {\n\t\t// TODO: this doesn't work!\n\t\tif (algorithm.stopExecution) {\n\t\t\treturn []\n\t\t}\n\t\tif (sortingArray.length < 2) {\n\t\t\treturn sortingArray\n\t\t}\n\n\t\tconst middle = Math.floor(sortingArray.length / 2)\n\n\t\treturn merge(\n\t\t\tawait mergeSort(sortingArray.slice(0, middle)),\n\t\t\tawait mergeSort(sortingArray.slice(middle))\n\t\t)\n\t}\n\n\tasync function merge(\n\t\tleft: SortingRect[],\n\t\tright: SortingRect[]\n\t): Promise<SortingRect[]> {\n\t\tconst resultSortingArray: SortingRect[] = []\n\t\tlet leftIndex = 0\n\t\tlet rightIndex = 0\n\n\t\twhile (leftIndex < left.length && rightIndex < right.length) {\n\t\t\tif (left[leftIndex].height < right[rightIndex].height) {\n\t\t\t\tresultSortingArray.push(left[leftIndex])\n\t\t\t\tleftIndex++\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tresultSortingArray.push(right[rightIndex])\n\t\t\trightIndex++\n\t\t}\n\n\t\t// merge based on height\n\t\tconst combinedArray = [\n\t\t\t...resultSortingArray,\n\t\t\t...left.slice(leftIndex),\n\t\t\t...right.slice(rightIndex)\n\t\t]\n\n\t\t// get all the x values of the current array and sort them and then set the merged contents above.\n\t\tconst combinedXArray = combinedArray\n\t\t\t.map((rect) => {\n\t\t\t\teraseRectangleByObject(rect)\n\t\t\t\treturn { x: rect.x, frequency: rect.frequency }\n\t\t\t})\n\t\t\t.sort((a, b) => a.x - b.x)\n\n\t\tfor (let n = 0; n < combinedXArray.length; n++) {\n\t\t\tcombinedArray[n].x = combinedXArray[n].x\n\t\t\tcombinedArray[n].frequency = combinedXArray[n].frequency\n\t\t}\n\n\t\t// gets an array of the index value of where the subarray is from the main array\n\t\tconst indexArray: number[] = []\n\t\tconst xValues = combinedArray.map((rect) => rect.height)\n\n\t\txValues.forEach((xValue) =>\n\t\t\tindexArray.push(\n\t\t\t\tsortingArray.findIndex(\n\t\t\t\t\t(rect) =>\n\t\t\t\t\t\trect.height ===\n\t\t\t\t\t\tcombinedArray[xValues.findIndex((x) => x === xValue)].height\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\n\t\t// drawing of the rectangles\n\t\tfor (let n = 0; n < combinedArray.length; n++) {\n\t\t\tif (algorithm.stopExecution) return []\n\n\t\t\tawait redrawRectangle(indexArray[n])\n\t\t}\n\n\t\treturn combinedArray\n\t}\n\n\tawait mergeSort(sortingArray)\n\n\treturn\n}\n","import type { SortingRect, SortingVisualizationProps } from '#types'\n\n// TODO: stop execution isnt working oops\nexport async function startQuickSort(\n\tsortingArray: SortingRect[],\n\talgorithm: SortingVisualizationProps,\n\tredrawRectangles: (firstIndex: number, secondIndex: number) => Promise<void>\n) {\n\tlet quickSortIndex = 0\n\n\tawait quickSort(0, sortingArray.length - 1)\n\n\tasync function quickSort(left: number, right: number) {\n\t\tquickSortIndex = await quicksortPartition(left, right) //index returned from partition\n\t\tif (algorithm.stopExecution) return\n\n\t\t//more elements on the left side of the pivot\n\t\tif (left < quickSortIndex - 1) await quickSort(left, quickSortIndex - 1)\n\n\t\t//more elements on the right side of the pivot\n\t\tif (quickSortIndex < right) await quickSort(quickSortIndex, right)\n\t}\n\n\tasync function quicksortPartition(left: number, right: number) {\n\t\tconst pivot = sortingArray[Math.floor((right + left) / 2)]\n\t\twhile (left <= right) {\n\t\t\tif (algorithm.stopExecution) return 0\n\n\t\t\t// increment up until find a height to the left larger than the pivot\n\t\t\twhile (sortingArray[left].height < pivot.height) left++\n\n\t\t\t// increment up until  find a height to the right smaller than the pivot\n\t\t\twhile (sortingArray[right].height > pivot.height) right--\n\n\t\t\tif (left <= right) await redrawRectangles(left, right)\n\t\t\tleft++\n\t\t\tright--\n\t\t}\n\t\treturn left\n\t}\n}\n","import type { SortingRect, SortingVisualizationProps } from '#types'\n\nexport async function startCombSort(\n\tsortingArray: SortingRect[],\n\talgorithm: SortingVisualizationProps,\n\tredrawRectangles: (firstIndex: number, secondIndex: number) => Promise<void>\n) {\n\tconst decrease_factor = 1.25\n\n\tawait combSort(sortingArray)\n\n\t// To find gap between elements\n\tfunction getNextGap(gap: number) {\n\t\treturn gap == 1 ? gap : Math.floor(gap / decrease_factor)\n\t}\n\n\tasync function combSort(sortingArray: SortingRect[]) {\n\t\tif (algorithm.stopExecution) {\n\t\t\tconsole.log(1)\n\t\t\treturn\n\t\t}\n\t\tconst numberOfRectangles = Number(algorithm.numberOfRectangles)\n\n\t\tlet gap = numberOfRectangles\n\n\t\tlet swapped = true\n\n\t\t// Keep running while gap is more than\n\t\t// 1 and last iteration caused a swap\n\t\twhile (gap != 1 || swapped == true) {\n\t\t\tif (algorithm.stopExecution) return\n\n\t\t\tgap = getNextGap(gap)\n\n\t\t\tswapped = false\n\n\t\t\tfor (let i = 0; i < numberOfRectangles - gap; i++) {\n\t\t\t\tif (sortingArray[i].height > sortingArray[i + gap].height) {\n\t\t\t\t\tawait redrawRectangles(i, i + gap)\n\n\t\t\t\t\tswapped = true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","<script setup lang=\"ts\">\nimport type { SortingVisualizationProps, SortingRect } from '#types'\nimport { onMounted, watch } from 'vue'\n\nimport { startMergeSort } from './mergeSort'\nimport { startQuickSort } from './quickSort'\nimport { startCombSort } from './combSort'\n\n// eslint-disable-next-line vue/no-setup-props-destructure, vue/no-dupe-keys\nconst { algorithm, startSortingMethod } = defineProps<{\n\talgorithm: SortingVisualizationProps\n\tstartSortingMethod: boolean\n}>()\n\nconst emit = defineEmits<{\n\trandomizeArrayDone: []\n\tsortingMethodEnded: []\n\taudioForRandomizing: []\n\tsortingMethodStarted: []\n\tsortingMethodEndedBools: []\n\tsortingMethodStartedBools: []\n\tbeep: [frequency: number]\n}>()\n\nlet Context2d: CanvasRenderingContext2D\nlet Canvas: HTMLCanvasElement\nlet sortingArray: SortingRect[] = []\n\nwatch(\n\t() => algorithm.randomizeArray,\n\tasync (newValue) => {\n\t\tif (newValue) {\n\t\t\temit('sortingMethodStartedBools')\n\t\t\temit('audioForRandomizing')\n\n\t\t\tContext2d.fillStyle = '#303030'\n\t\t\tContext2d.fillRect(0, 0, Canvas.width, Canvas.height)\n\t\t\tContext2d.fillStyle = '#0F0'\n\t\t\tcreateUnsortedArray()\n\t\t\tawait drawAllRectangles()\n\t\t\talgorithm.oscillator.disconnect()\n\n\t\t\temit('sortingMethodEndedBools')\n\t\t\temit('randomizeArrayDone')\n\t\t}\n\t}\n)\n\nwatch(\n\t() => startSortingMethod,\n\tasync () => {\n\t\tif (startSortingMethod) {\n\t\t\temit('sortingMethodStarted')\n\t\t\tswitch (algorithm.sortingMethod) {\n\t\t\t\tcase 'Bubble':\n\t\t\t\t\tawait bubbleSort()\n\t\t\t\t\tbreak\n\t\t\t\tcase 'Cocktail Shaker':\n\t\t\t\t\tawait cocktailShakerSort()\n\t\t\t\t\tbreak\n\t\t\t\tcase 'Heap':\n\t\t\t\t\tawait heapSort()\n\t\t\t\t\tbreak\n\t\t\t\tcase 'Insertion':\n\t\t\t\t\tawait insertionSort()\n\t\t\t\t\tbreak\n\t\t\t\tcase 'Merge':\n\t\t\t\t\tawait startMergeSort(\n\t\t\t\t\t\talgorithm,\n\t\t\t\t\t\tsortingArray,\n\t\t\t\t\t\teraseRectangleByObject,\n\t\t\t\t\t\tredrawRectangle\n\t\t\t\t\t)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'Quick':\n\t\t\t\t\tawait startQuickSort(sortingArray, algorithm, redrawRectangles)\n\t\t\t\t\tbreak\n\t\t\t\tcase 'Selection':\n\t\t\t\t\tawait selectionSort()\n\t\t\t\t\tbreak\n\t\t\t\tcase 'Shell':\n\t\t\t\t\tawait shellSort()\n\t\t\t\t\tbreak\n\t\t\t\tcase 'Gnome':\n\t\t\t\t\tawait gnomeSort()\n\t\t\t\t\tbreak\n\t\t\t\tcase 'Bogo':\n\t\t\t\t\tawait bogoSort()\n\t\t\t\t\tbreak\n\t\t\t\tcase 'Comb':\n\t\t\t\t\tawait startCombSort(sortingArray, algorithm, redrawRectangles)\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t\temit('sortingMethodEnded')\n\t\t}\n\t}\n)\n\n// Lifecycle hooks\nonMounted(async () => {\n\temit('sortingMethodStartedBools')\n\tCanvas = document.getElementById('canvas') as HTMLCanvasElement\n\tCanvas.setAttribute('height', String(window.innerHeight - 64))\n\tCanvas.setAttribute('width', String(window.innerWidth - 300))\n\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\tContext2d = Canvas.getContext('2d')!\n\tfixDpi()\n\tContext2d.fillStyle = '#0F0'\n\tcreateUnsortedArray()\n\tawait drawAllRectangles()\n\temit('sortingMethodEndedBools')\n})\n\nfunction fixDpi() {\n\tCanvas.setAttribute(\n\t\t'height',\n\t\tString(\n\t\t\tNumber(getComputedStyle(Canvas).getPropertyValue('height').slice(0, -2)) *\n\t\t\t\twindow.devicePixelRatio\n\t\t)\n\t)\n\tCanvas.setAttribute(\n\t\t'width',\n\t\tString(\n\t\t\tNumber(getComputedStyle(Canvas).getPropertyValue('width').slice(0, -2)) *\n\t\t\t\twindow.devicePixelRatio\n\t\t)\n\t)\n}\n\n/// helpers\nfunction swapArrayElements(index1: number, index2: number) {\n\t// swap the x and Frequency values then swap the objects\n\t// eslint-disable-next-line\n\t;[\n\t\tsortingArray[index1].x,\n\t\tsortingArray[index2].x,\n\t\tsortingArray[index1].frequency,\n\t\tsortingArray[index2].frequency,\n\t\tsortingArray[index1],\n\t\tsortingArray[index2]\n\t] = [\n\t\tsortingArray[index2].x,\n\t\tsortingArray[index1].x,\n\t\tsortingArray[index2].frequency,\n\t\tsortingArray[index1].frequency,\n\t\tsortingArray[index2],\n\t\tsortingArray[index1]\n\t]\n}\n\nfunction createUnsortedArray() {\n\tsortingArray = []\n\tconst widthOfRect = Canvas.width / Number(algorithm.numberOfRectangles)\n\tconst heightOfRect = Canvas.height / Number(algorithm.numberOfRectangles)\n\tconst lowFrequencyBound = 100\n\tconst highFrequencyBound = 10000\n\tconst frequencyIncrease =\n\t\thighFrequencyBound / Number(algorithm.numberOfRectangles)\n\n\tfor (let n = 0; n < Number(algorithm.numberOfRectangles); n++)\n\t\tsortingArray.push({\n\t\t\tx: widthOfRect * n,\n\t\t\ty: Canvas.height - heightOfRect * (n + 1),\n\t\t\twidth: widthOfRect - 1,\n\t\t\theight: heightOfRect * (n + 1),\n\t\t\tfrequency: frequencyIncrease * n + lowFrequencyBound\n\t\t})\n\n\tfor (let n = 0; n < Number(algorithm.numberOfRectangles) * 10; n++)\n\t\trandomSwaps()\n}\n\nfunction randomSwaps() {\n\tconst firstElementIndex = Math.floor(\n\t\tMath.random() * Number(algorithm.numberOfRectangles)\n\t)\n\tlet secondElementIndex = 0\n\n\tdo\n\t\tsecondElementIndex = Math.floor(\n\t\t\tMath.random() * Number(algorithm.numberOfRectangles)\n\t\t)\n\twhile (firstElementIndex === secondElementIndex)\n\n\tswapArrayElements(firstElementIndex, secondElementIndex)\n}\n\n// // // // // // //\n// Drawing functions\n// // // // // // //\nasync function drawAllRectangles() {\n\tfor (let n = 0; n < Number(algorithm.numberOfRectangles); n++)\n\t\tawait drawRectangle(n, true)\n\n\tawait sleep(0)\n}\n\nasync function redrawRectangles(firstIndex: number, secondIndex: number) {\n\t// blank out the recatngles that are being swapped\n\teraseRectangle(firstIndex)\n\teraseRectangle(secondIndex)\n\n\t// redraw them\n\tswapArrayElements(firstIndex, secondIndex)\n\tawait redrawRectangle(firstIndex)\n\tawait redrawRectangle(secondIndex)\n}\n\nasync function drawRectangle(index: number, microTask?: boolean) {\n\tfunction fillRect() {\n\t\tContext2d.fillRect(\n\t\t\tsortingArray[index].x,\n\t\t\tsortingArray[index].y,\n\t\t\tsortingArray[index].width,\n\t\t\tsortingArray[index].height\n\t\t)\n\t}\n\n\tif (microTask) {\n\t\tqueueMicrotask(() => {\n\t\t\tfillRect()\n\t\t})\n\t} else {\n\t\tfillRect()\n\t\tawait sleep(Number(algorithm.sleepTime))\n\t}\n}\n\nfunction eraseRectangle(index: number) {\n\tContext2d.fillStyle = '#303030'\n\tContext2d.fillRect(\n\t\tsortingArray[index].x - 1,\n\t\tsortingArray[index].y - 1,\n\t\tsortingArray[index].width + 2,\n\t\tsortingArray[index].height + 2\n\t)\n\tContext2d.fillStyle = '#0F0'\n}\n\nfunction eraseRectangleByObject(rect: SortingRect) {\n\tContext2d.fillStyle = '#303030'\n\tContext2d.fillRect(rect.x - 1, rect.y - 1, rect.width + 2, rect.height + 2)\n\tContext2d.fillStyle = '#0F0'\n}\n\nasync function redrawRectangle(index: number) {\n\temit('beep', sortingArray[index].frequency)\n\tawait drawRectangle(index)\n}\n\nfunction sleep(time: number) {\n\treturn new Promise((s) => setTimeout(s, time))\n}\n\n// // // // // // //\n// Sorting functions\n// // // // // // //\nasync function bubbleSort() {\n\tconst length = sortingArray.length\n\tlet swapped = false\n\tlet count = 0\n\tlet n = 0\n\n\tdo {\n\t\tcount++\n\t\tswapped = false\n\t\tfor (n = 0; n < length - count; n++) {\n\t\t\tif (algorithm.stopExecution) return\n\n\t\t\tif (sortingArray[n].height > sortingArray[n + 1].height) {\n\t\t\t\tawait redrawRectangles(n, n + 1)\n\t\t\t\tswapped = true\n\t\t\t}\n\t\t}\n\t} while (swapped)\n}\n\nasync function insertionSort() {\n\tconst length = sortingArray.length\n\tlet j = 0\n\tlet current: SortingRect\n\n\tfor (let i = 1; i < length; i++) {\n\t\tcurrent = sortingArray[i]\n\n\t\tfor (j = i - 1; j >= 0 && sortingArray[j].height > current.height; j--) {\n\t\t\tif (algorithm.stopExecution) return\n\n\t\t\tawait redrawRectangles(j, j + 1)\n\t\t}\n\n\t\tsortingArray[j + 1] = current\n\t}\n}\n\nasync function selectionSort() {\n\tlet minHeight = 0\n\tlet x = 0\n\n\tfor (let n = 0; n < sortingArray.length; n++) {\n\t\tminHeight = n // Finding the smallest number in the array\n\t\tfor (x = n + 1; x < sortingArray.length; x++) {\n\t\t\tif (algorithm.stopExecution) return\n\n\t\t\tif (sortingArray[x].height < sortingArray[minHeight].height) minHeight = x\n\t\t}\n\t\tif (minHeight !== n) await redrawRectangles(n, minHeight)\n\t}\n}\n\nasync function cocktailShakerSort() {\n\tlet sorted = false\n\tlet n = 0\n\n\twhile (!sorted) {\n\t\tsorted = true\n\t\twhile (n < sortingArray.length - 1) {\n\t\t\tif (algorithm.stopExecution) return\n\n\t\t\tif (sortingArray[n].height > sortingArray[n + 1].height) {\n\t\t\t\tawait redrawRectangles(n, n + 1)\n\t\t\t\tsorted = false\n\t\t\t}\n\t\t\tn++\n\t\t}\n\n\t\tif (sorted) break\n\n\t\tsorted = true\n\n\t\twhile (n > 0) {\n\t\t\tif (algorithm.stopExecution) return\n\n\t\t\tif (sortingArray[n - 1].height > sortingArray[n].height)\n\t\t\t\tawait redrawRectangles(n, n - 1)\n\t\t\tsorted = false\n\n\t\t\tn--\n\t\t}\n\t}\n}\n\nasync function heapSort() {\n\tasync function heapify(size: number, index: number) {\n\t\tlet max = index\n\t\tconst left = 2 * index + 1\n\t\tconst right = 2 * index + 2\n\n\t\tif (algorithm.stopExecution) return\n\n\t\tif (left < size && sortingArray[left].height > sortingArray[max].height)\n\t\t\tmax = left\n\n\t\tif (right < size && sortingArray[right].height > sortingArray[max].height)\n\t\t\tmax = right\n\n\t\tif (max != index) {\n\t\t\tawait redrawRectangles(index, max)\n\t\t\tawait heapify(size, max)\n\t\t}\n\t}\n\n\tfor (let n = Math.floor(sortingArray.length / 2 - 1); n >= 0; n--) {\n\t\tif (algorithm.stopExecution) return\n\n\t\tawait heapify(sortingArray.length, n)\n\t}\n\n\tfor (let n = sortingArray.length - 1; n >= 0; n--) {\n\t\tif (algorithm.stopExecution) return\n\n\t\tawait redrawRectangles(0, n)\n\t\tawait heapify(n, 0)\n\t}\n}\n\nasync function shellSort() {\n\tlet n = 0,\n\t\tx = 0\n\n\tfor (\n\t\tlet gap = Math.floor(sortingArray.length / 2);\n\t\tgap > 0;\n\t\tgap = Math.floor(gap / 2)\n\t) {\n\t\tfor (x = gap; x < sortingArray.length; x += 1) {\n\t\t\tconst temp = sortingArray[x]\n\n\t\t\tfor (\n\t\t\t\tn = x;\n\t\t\t\tn >= gap && sortingArray[n - gap].height > temp.height;\n\t\t\t\tn -= gap\n\t\t\t) {\n\t\t\t\tif (algorithm.stopExecution) return\n\n\t\t\t\tawait redrawRectangles(n, n - gap)\n\t\t\t}\n\n\t\t\tsortingArray[n].x = temp.x\n\t\t\tsortingArray[n] = temp\n\t\t}\n\t}\n}\n\nasync function gnomeSort() {\n\tfor (let n = 1; n < sortingArray.length; n++) {\n\t\tif (sortingArray[n - 1].height > sortingArray[n].height) {\n\t\t\twhile (n > 0 && sortingArray[n - 1].height > sortingArray[n].height) {\n\t\t\t\tif (algorithm.stopExecution) return\n\n\t\t\t\tawait redrawRectangles(n, n - 1)\n\t\t\t\tn--\n\t\t\t}\n\t\t}\n\t}\n}\n\nasync function bogoSort() {\n\tfunction isNotSorted() {\n\t\tfor (let n = 1; n < sortingArray.length; n++) {\n\t\t\tif (sortingArray[n - 1].height > sortingArray[n].height) return true\n\t\t}\n\t\treturn false\n\t}\n\n\tasync function redrawAllRectangles() {\n\t\tfor (let n = 0; n < Number(algorithm.numberOfRectangles); n++)\n\t\t\teraseRectangle(n)\n\n\t\tfor (let n = 0; n < Number(algorithm.numberOfRectangles); n++) randomSwaps()\n\n\t\tfor (let n = 0; n < Number(algorithm.numberOfRectangles); n++)\n\t\t\tawait redrawRectangle(n)\n\t}\n\n\twhile (isNotSorted()) {\n\t\tif (algorithm.stopExecution) return\n\n\t\tawait redrawAllRectangles()\n\t}\n}\n</script>\n\n<template>\n\t<canvas id=\"canvas\" class=\"w-[calc(100vw_-_288px)]\"></canvas>\n</template>\n","<script setup lang=\"ts\">\nimport type { SortingAlgorithm } from '#types'\nimport { ref, watch } from 'vue'\nimport SortingVisualization from './sorting/SortingVisualization.vue'\n\n// TODO:\n// Convert drawing to be microTasks to improve rendering speed?\n// Show time to draw and time to execute\n// Show array accesses?\n// Show swaps?\n// Implement WebGPU (with OpenGL backup)\n\nconst sleepTime = ref<number | string>(0)\nconst volume = ref(0.025)\nconst stopExecution = ref(false)\nconst randomizeArray = ref(false)\nconst disableStopButton = ref(true)\nconst numberOfRectangles = ref<number | string>(100)\nconst disableSortButtons = ref(false)\nconst disableRandomizeButton = ref(false)\nconst disableRectangleSlider = ref(false)\n// executionTime = ref(0),\nconst oscillator = ref<OscillatorNode>()\nconst sortingMethod = ref<SortingAlgorithm>('Quick')\n// prettier-ignore\nconst sorts = ref<SortingAlgorithm[]>([\n\t'Bubble', 'Insertion', 'Cocktail Shaker', 'Selection',\n\t'Merge', 'Quick', 'Heap', 'Shell', 'Gnome', 'Bogo', 'Comb'\n])\nconst startSortingMethod = ref(false)\n\nlet audioContext!: AudioContext\nlet audioIntialized = false\nlet gainNode!: GainNode\n\n// Watchers\nwatch(numberOfRectangles, () => {\n\tintializeAudio()\n\tdisableSortButtons.value = true\n})\n\nwatch(volume, () => {\n\tintializeAudio()\n\tif (disableSortButtons.value) {\n\t\toscillator.value?.disconnect()\n\t\tgainNode.gain.setValueAtTime(volume.value, audioContext.currentTime)\n\t\toscillator.value?.connect(gainNode).connect(audioContext.destination)\n\t\treturn\n\t}\n\n\tgainNode.gain.setValueAtTime(volume.value, audioContext.currentTime)\n})\n\nasync function stop(): Promise<void> {\n\tstopExecution.value = true\n\toscillator.value?.disconnect()\n\tawait sleep(500) // easy safe way to ensure all operations are done\n\tstopExecution.value = false\n\toscillator.value?.disconnect()\n\tsortingMethodEndedBools()\n}\n\n// TODO: sorting methods to add\n//\n// Real sorting algorithms\n//\n// radix (LSD)\n// radix (MSD)\n// std::sort (intro sort)\n// std::stable_sort (adaptive merge sort)\n// bitonic\n// binary insertion\n// tim\n// Quad\n// smooth\n// odd even\n//\n// GOATED SORTING ALGORITHMS\n// Stooge Sort\n// Slowsort\n// Stalin Sort\n// bozo sort\n// Bogobogo sort\n\nfunction sleep(time: number) {\n\treturn new Promise((s) => setTimeout(s, time))\n}\n\nfunction sortingMethodStarted() {\n\tintializeAudio()\n\toscillator.value?.connect(gainNode).connect(audioContext.destination)\n\tsortingMethodStartedBools()\n}\n\nfunction sortingMethodEnded() {\n\toscillator.value?.disconnect()\n\tsortingMethodEndedBools()\n\tstartSortingMethod.value = false\n}\n\nfunction sortingMethodStartedBools() {\n\tdisableRectangleSlider.value = true\n\tdisableRandomizeButton.value = true\n\tdisableSortButtons.value = true\n\tdisableStopButton.value = false\n}\n\nfunction sortingMethodEndedBools() {\n\tdisableRectangleSlider.value = false\n\tdisableRandomizeButton.value = false\n\tdisableSortButtons.value = false\n\tdisableStopButton.value = true\n}\n\n// // // // // // //\n// Audio Functions\n// // // // // // //\nfunction intializeAudio() {\n\tif (audioIntialized) return\n\n\taudioContext = new AudioContext()\n\n\tgainNode = new GainNode(audioContext, {\n\t\tgain: volume.value\n\t})\n\n\toscillator.value = new OscillatorNode(audioContext, {\n\t\ttype: 'sine',\n\t\tfrequency: 500\n\t})\n\n\toscillator.value.start()\n\toscillator.value.connect(audioContext.destination)\n\toscillator.value.disconnect()\n\taudioIntialized = true\n}\n\nfunction beep(frequency: number) {\n\toscillator.value?.frequency.setValueAtTime(\n\t\tfrequency,\n\t\taudioContext.currentTime\n\t)\n}\n\nfunction audioForRandomizing() {\n\tintializeAudio()\n\toscillator.value?.connect(gainNode).connect(audioContext.destination)\n\tbeep(300)\n}\n\nfunction startSort() {\n\tif (!startSortingMethod.value) {\n\t\tstartSortingMethod.value = true\n\t}\n}\n</script>\n\n<template>\n\t<div class=\"flex h-[calc(100vh_-_64px)]\">\n\t\t<div class=\"flex flex-col justify-center items-center gap-2 w-72\">\n\t\t\t<div class=\"flex flex-col\">\n\t\t\t\t<div class=\"p-4\">\n\t\t\t\t\tCurrently a few bugs, refactoring and updating this right now :)\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\tVolume: {{ parseFloat((volume * 5 * 100).toFixed(1)) }}%\n\t\t\t\t\t<input\n\t\t\t\t\t\tv-model=\"volume\"\n\t\t\t\t\t\tclass=\"w-64 h-6 bg-transparent\"\n\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\tmin=\"0\"\n\t\t\t\t\t\tmax=\"0.2\"\n\t\t\t\t\t\tstep=\"0.0001\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\tAdd extra Delay of: {{ sleepTime }}ms\n\t\t\t\t\t<input\n\t\t\t\t\t\tv-model=\"sleepTime\"\n\t\t\t\t\t\tclass=\"w-64 h-6 bg-transparent\"\n\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\tmin=\"0\"\n\t\t\t\t\t\tmax=\"250\"\n\t\t\t\t\t\tstep=\"5\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t{{ numberOfRectangles }} Rectangles\n\t\t\t\t\t<input\n\t\t\t\t\t\tv-model=\"numberOfRectangles\"\n\t\t\t\t\t\tclass=\"w-64 h-6 bg-transparent\"\n\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\tmin=\"5\"\n\t\t\t\t\t\tmax=\"1000\"\n\t\t\t\t\t\tstep=\"5\"\n\t\t\t\t\t\t:disabled=\"disableRectangleSlider\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div class=\"flex flex-col justify-center items-center gap-2\">\n\t\t\t\t<div class=\"flex gap-2\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"tw-button h-[50px] w-[130px] p-0\"\n\t\t\t\t\t\t:disabled=\"disableStopButton\"\n\t\t\t\t\t\t@click=\"stop\"\n\t\t\t\t\t>\n\t\t\t\t\t\tStop Execution\n\t\t\t\t\t</button>\n\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"tw-button h-[50px] w-[130px] p-0\"\n\t\t\t\t\t\t:disabled=\"disableRandomizeButton\"\n\t\t\t\t\t\t@click=\"randomizeArray = true\"\n\t\t\t\t\t>\n\t\t\t\t\t\tRandomize\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<select v-model=\"sortingMethod\" class=\"tw-music-select h-12\">\n\t\t\t\t\t<option\n\t\t\t\t\t\tv-for=\"(algorithm, index) in sorts\"\n\t\t\t\t\t\t:key=\"index\"\n\t\t\t\t\t\t:value=\"algorithm\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ algorithm }}\n\t\t\t\t\t</option>\n\t\t\t\t</select>\n\n\t\t\t\t<button class=\"tw-button h-[50px] w-[130px] p-0\" @click=\"startSort\">\n\t\t\t\t\tStart sort\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<!-- TODO! -->\n\t\t<!-- merge sort doesnt stop -->\n\t\t<!-- quick sort doesnt stop -->\n\t\t<!-- comb sort doesnt stop -->\n\t\t<!-- this is because the function doesnt have a reactive state of the boolean to stop -->\n\n\t\t<SortingVisualization\n\t\t\t:algorithm=\"{\n\t\t\t\tsleepTime: sleepTime,\n\t\t\t\tstopExecution: stopExecution,\n\t\t\t\trandomizeArray: randomizeArray,\n\t\t\t\toscillator: oscillator!,\n\t\t\t\tnumberOfRectangles: numberOfRectangles,\n\t\t\t\tsortingMethod: sortingMethod\n\t\t\t}\"\n\t\t\t:start-sorting-method=\"startSortingMethod\"\n\t\t\t@sorting-method-started-bools=\"sortingMethodStartedBools\"\n\t\t\t@sorting-method-ended-bools=\"sortingMethodEndedBools\"\n\t\t\t@sorting-method-started=\"sortingMethodStarted\"\n\t\t\t@audio-for-randomizing=\"audioForRandomizing\"\n\t\t\t@sorting-method-ended=\"sortingMethodEnded\"\n\t\t\t@randomize-array-done=\"randomizeArray = false\"\n\t\t\t@beep=\"beep\"\n\t\t/>\n\t</div>\n</template>\n"],"names":["startMergeSort","algorithm","sortingArray","eraseRectangleByObject","redrawRectangle","mergeSort","middle","merge","left","right","resultSortingArray","leftIndex","rightIndex","combinedArray","combinedXArray","rect","a","b","n","indexArray","xValues","xValue","x","startQuickSort","redrawRectangles","quickSortIndex","quickSort","quicksortPartition","pivot","startCombSort","combSort","getNextGap","gap","numberOfRectangles","swapped","i","emit","__emit","Context2d","Canvas","watch","__props","newValue","createUnsortedArray","drawAllRectangles","bubbleSort","cocktailShakerSort","heapSort","insertionSort","selectionSort","shellSort","gnomeSort","bogoSort","onMounted","fixDpi","swapArrayElements","index1","index2","widthOfRect","heightOfRect","lowFrequencyBound","frequencyIncrease","randomSwaps","firstElementIndex","secondElementIndex","drawRectangle","sleep","firstIndex","secondIndex","eraseRectangle","index","microTask","fillRect","time","s","length","count","j","current","minHeight","sorted","heapify","size","max","temp","isNotSorted","redrawAllRectangles","sleepTime","ref","volume","stopExecution","randomizeArray","disableStopButton","disableSortButtons","disableRandomizeButton","disableRectangleSlider","oscillator","sortingMethod","sorts","startSortingMethod","audioContext","audioIntialized","gainNode","intializeAudio","stop","sortingMethodEndedBools","sortingMethodStarted","sortingMethodStartedBools","sortingMethodEnded","beep","frequency","audioForRandomizing","startSort"],"mappings":"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"}
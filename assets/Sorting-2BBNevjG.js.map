{"version":3,"file":"Sorting-2BBNevjG.js","sources":["../../src/pages/subcomponents/SortingVisualization.vue","../../src/pages/Sorting.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport type { SortingVisualizationProps, SortingRect } from '#types'\nimport { onMounted, watch } from 'vue'\n\n// eslint-disable-next-line vue/no-setup-props-destructure, vue/no-dupe-keys\nconst { algorithm } = defineProps<{\n\talgorithm: SortingVisualizationProps\n}>()\n\nconst emit = defineEmits<{\n\trandomizeArrayDone: []\n\tsortingMethodEnded: []\n\taudioForRandomizing: []\n\tsortingMethodStarted: []\n\tsortingMethodEndedBools: []\n\tsortingMethodStartedBools: []\n\tbeep: [frequency: number]\n}>()\n\nlet Context2d: CanvasRenderingContext2D\nlet Canvas: HTMLCanvasElement\nlet sortingArray: SortingRect[] = []\nlet quickSortIndex = 0\n\nwatch(\n\t() => algorithm.randomizeArray,\n\tasync (newValue) => {\n\t\tif (newValue) {\n\t\t\temit('sortingMethodStartedBools')\n\t\t\temit('audioForRandomizing')\n\n\t\t\tContext2d.fillStyle = '#303030'\n\t\t\tContext2d.fillRect(0, 0, Canvas.width, Canvas.height)\n\t\t\tContext2d.fillStyle = '#0F0'\n\t\t\tcreateUnsortedArray()\n\t\t\tawait drawAllRectangles()\n\t\t\talgorithm.oscillator.disconnect()\n\n\t\t\temit('sortingMethodEndedBools')\n\t\t\temit('randomizeArrayDone')\n\t\t}\n\t}\n)\n\nwatch(\n\t() => algorithm.sortingMethod,\n\tasync (newValue) => {\n\t\temit('sortingMethodStarted')\n\t\tswitch (newValue) {\n\t\t\tcase 'Bubble':\n\t\t\t\tawait bubbleSort()\n\t\t\t\tbreak\n\t\t\tcase 'Cocktail Shaker':\n\t\t\t\tawait cocktailShakerSort()\n\t\t\t\tbreak\n\t\t\tcase 'Heap':\n\t\t\t\tawait heapSort()\n\t\t\t\tbreak\n\t\t\tcase 'Insertion':\n\t\t\t\tawait insertionSort()\n\t\t\t\tbreak\n\t\t\tcase 'Merge':\n\t\t\t\tsortingArray = await mergeSort(sortingArray)\n\t\t\t\tbreak\n\t\t\tcase 'Quick':\n\t\t\t\tawait quickSort(0, sortingArray.length - 1)\n\t\t\t\tbreak\n\t\t\tcase 'Selection':\n\t\t\t\tawait selectionSort()\n\t\t\t\tbreak\n\t\t\tcase 'Shell':\n\t\t\t\tawait shellSort()\n\t\t\t\tbreak\n\t\t\tcase 'Gnome':\n\t\t\t\tawait gnomeSort()\n\t\t\t\tbreak\n\t\t\tcase 'Bogo':\n\t\t\t\tawait bogoSort()\n\t\t\t\tbreak\n\t\t}\n\t\temit('sortingMethodEnded')\n\t}\n)\n\n// Lifecycle hooks\nonMounted(async () => {\n\temit('sortingMethodStartedBools')\n\tCanvas = document.getElementById('canvas') as HTMLCanvasElement\n\tCanvas.setAttribute('height', String(window.innerHeight - 64))\n\tCanvas.setAttribute('width', String(window.innerWidth - 300))\n\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\tContext2d = Canvas.getContext('2d')!\n\tfixDpi()\n\tContext2d.fillStyle = '#0F0'\n\tcreateUnsortedArray()\n\tawait drawAllRectangles()\n\temit('sortingMethodEndedBools')\n})\n\nfunction fixDpi() {\n\tCanvas.setAttribute(\n\t\t'height',\n\t\tString(\n\t\t\tNumber(getComputedStyle(Canvas).getPropertyValue('height').slice(0, -2)) *\n\t\t\t\twindow.devicePixelRatio\n\t\t)\n\t)\n\tCanvas.setAttribute(\n\t\t'width',\n\t\tString(\n\t\t\tNumber(getComputedStyle(Canvas).getPropertyValue('width').slice(0, -2)) *\n\t\t\t\twindow.devicePixelRatio\n\t\t)\n\t)\n}\n\nfunction swapArrayElements(index1: number, index2: number) {\n\t// swap the x and Frequency values then swap the objects\n\t// eslint-disable-next-line\n\t;[\n\t\tsortingArray[index1].x,\n\t\tsortingArray[index2].x,\n\t\tsortingArray[index1].frequency,\n\t\tsortingArray[index2].frequency,\n\t\tsortingArray[index1],\n\t\tsortingArray[index2]\n\t] = [\n\t\tsortingArray[index2].x,\n\t\tsortingArray[index1].x,\n\t\tsortingArray[index2].frequency,\n\t\tsortingArray[index1].frequency,\n\t\tsortingArray[index2],\n\t\tsortingArray[index1]\n\t]\n}\n\nfunction createUnsortedArray() {\n\tsortingArray = []\n\tconst widthOfRect = Canvas.width / Number(algorithm.numberOfRectangles)\n\tconst heightOfRect = Canvas.height / Number(algorithm.numberOfRectangles)\n\tconst lowFrequencyBound = 100\n\tconst highFrequencyBound = 10000\n\tconst frequencyIncrease =\n\t\thighFrequencyBound / Number(algorithm.numberOfRectangles)\n\n\tfor (let n = 0; n < Number(algorithm.numberOfRectangles); n++) {\n\t\tsortingArray.push({\n\t\t\tx: widthOfRect * n,\n\t\t\ty: Canvas.height - heightOfRect * (n + 1),\n\t\t\twidth: widthOfRect - 1,\n\t\t\theight: heightOfRect * (n + 1),\n\t\t\tfrequency: frequencyIncrease * n + lowFrequencyBound\n\t\t})\n\t}\n\n\tfor (let n = 0; n < Number(algorithm.numberOfRectangles) * 10; n++) {\n\t\trandomSwaps()\n\t}\n}\n\nfunction randomSwaps() {\n\tconst firstElementIndex = Math.floor(\n\t\tMath.random() * Number(algorithm.numberOfRectangles)\n\t)\n\tlet secondElementIndex = 0\n\n\tdo {\n\t\tsecondElementIndex = Math.floor(\n\t\t\tMath.random() * Number(algorithm.numberOfRectangles)\n\t\t)\n\t} while (firstElementIndex === secondElementIndex)\n\n\tswapArrayElements(firstElementIndex, secondElementIndex)\n}\n\n// // // // // // //\n// Drawing functions\n// // // // // // //\nasync function drawAllRectangles() {\n\tfor (let n = 0; n < Number(algorithm.numberOfRectangles); n++) {\n\t\tawait drawRectangle(n, true)\n\t}\n\n\tawait sleep(0)\n}\n\nasync function redrawRectangles(firstIndex: number, secondIndex: number) {\n\t// blank out the recatngles that are being swapped\n\teraseRectangle(firstIndex)\n\teraseRectangle(secondIndex)\n\n\t// redraw them\n\tswapArrayElements(firstIndex, secondIndex)\n\tawait redrawRectangle(firstIndex)\n\tawait redrawRectangle(secondIndex)\n}\n\nasync function drawRectangle(index: number, microTask?: boolean) {\n\tconst fillRect = () =>\n\t\tContext2d.fillRect(\n\t\t\tsortingArray[index].x,\n\t\t\tsortingArray[index].y,\n\t\t\tsortingArray[index].width,\n\t\t\tsortingArray[index].height\n\t\t)\n\n\tif (microTask) {\n\t\tqueueMicrotask(() => {\n\t\t\tfillRect()\n\t\t})\n\t} else {\n\t\tfillRect()\n\t\tawait sleep(Number(algorithm.sleepTime))\n\t}\n}\n\nfunction eraseRectangle(index: number) {\n\tContext2d.fillStyle = '#303030'\n\tContext2d.fillRect(\n\t\tsortingArray[index].x - 1,\n\t\tsortingArray[index].y - 1,\n\t\tsortingArray[index].width + 2,\n\t\tsortingArray[index].height + 2\n\t)\n\tContext2d.fillStyle = '#0F0'\n}\n\nfunction eraseRectangleByObject(rect: SortingRect) {\n\tContext2d.fillStyle = '#303030'\n\tContext2d.fillRect(rect.x - 1, rect.y - 1, rect.width + 2, rect.height + 2)\n\tContext2d.fillStyle = '#0F0'\n}\n\nasync function redrawRectangle(index: number) {\n\temit('beep', sortingArray[index].frequency)\n\tawait drawRectangle(index)\n}\n\nfunction sleep(time: number) {\n\treturn new Promise((s) => setTimeout(s, time))\n}\n\n// // // // // // //\n// Sorting functions\n// // // // // // //\nasync function bubbleSort() {\n\tconst length = sortingArray.length\n\tlet swapped = false\n\tlet count = 0\n\tlet n = 0\n\n\tdo {\n\t\tcount++\n\t\tswapped = false\n\t\tfor (n = 0; n < length - count; n++) {\n\t\t\tif (algorithm.stopExecution) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif (sortingArray[n].height > sortingArray[n + 1].height) {\n\t\t\t\tawait redrawRectangles(n, n + 1)\n\t\t\t\tswapped = true\n\t\t\t}\n\t\t}\n\t} while (swapped)\n}\n\nasync function insertionSort() {\n\tconst length = sortingArray.length\n\tlet j = 0\n\tlet current: SortingRect\n\n\tfor (let i = 1; i < length; i++) {\n\t\tcurrent = sortingArray[i]\n\n\t\tfor (j = i - 1; j >= 0 && sortingArray[j].height > current.height; j--) {\n\t\t\tif (algorithm.stopExecution) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tawait redrawRectangles(j, j + 1)\n\t\t}\n\n\t\tsortingArray[j + 1] = current\n\t}\n}\n\nasync function selectionSort() {\n\tlet minHeight = 0\n\tlet x = 0\n\n\tfor (let n = 0; n < sortingArray.length; n++) {\n\t\tminHeight = n // Finding the smallest number in the array\n\t\tfor (x = n + 1; x < sortingArray.length; x++) {\n\t\t\tif (algorithm.stopExecution) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif (sortingArray[x].height < sortingArray[minHeight].height) {\n\t\t\t\tminHeight = x\n\t\t\t}\n\t\t}\n\t\tif (minHeight !== n) {\n\t\t\tawait redrawRectangles(n, minHeight)\n\t\t}\n\t}\n}\n\nasync function cocktailShakerSort() {\n\tlet sorted = false\n\tlet n = 0\n\n\twhile (!sorted) {\n\t\tsorted = true\n\t\twhile (n < sortingArray.length - 1) {\n\t\t\tif (algorithm.stopExecution) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif (sortingArray[n].height > sortingArray[n + 1].height) {\n\t\t\t\tawait redrawRectangles(n, n + 1)\n\t\t\t\tsorted = false\n\t\t\t}\n\t\t\tn++\n\t\t}\n\n\t\tif (sorted) {\n\t\t\tbreak\n\t\t}\n\n\t\tsorted = true\n\n\t\twhile (n > 0) {\n\t\t\tif (algorithm.stopExecution) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif (sortingArray[n - 1].height > sortingArray[n].height) {\n\t\t\t\tawait redrawRectangles(n, n - 1)\n\t\t\t\tsorted = false\n\t\t\t}\n\t\t\tn--\n\t\t}\n\t}\n}\n\nasync function quickSort(left: number, right: number) {\n\tquickSortIndex = await quicksortPartition(left, right) //index returned from partition\n\tif (algorithm.stopExecution) {\n\t\treturn\n\t}\n\n\t//more elements on the left side of the pivot\n\tif (left < quickSortIndex - 1) {\n\t\tawait quickSort(left, quickSortIndex - 1)\n\t}\n\n\t//more elements on the right side of the pivot\n\tif (quickSortIndex < right) {\n\t\tawait quickSort(quickSortIndex, right)\n\t}\n}\n\nasync function quicksortPartition(left: number, right: number) {\n\tconst pivot = sortingArray[Math.floor((right + left) / 2)]\n\twhile (left <= right) {\n\t\tif (algorithm.stopExecution) {\n\t\t\treturn 0\n\t\t}\n\t\t// increment up until find a height to the left larger than the pivot\n\t\twhile (sortingArray[left].height < pivot.height) {\n\t\t\tleft++\n\t\t}\n\t\t// increment up until  find a height to the right smaller than the pivot\n\t\twhile (sortingArray[right].height > pivot.height) {\n\t\t\tright--\n\t\t}\n\n\t\tif (left <= right) {\n\t\t\tawait redrawRectangles(left, right)\n\t\t\tleft++\n\t\t\tright--\n\t\t}\n\t}\n\treturn left\n}\n\nasync function mergeSort(unsorted: SortingRect[]): Promise<SortingRect[]> {\n\tif (algorithm.stopExecution) {\n\t\treturn []\n\t}\n\tif (unsorted.length < 2) {\n\t\treturn unsorted\n\t}\n\n\tconst middle = Math.floor(unsorted.length / 2)\n\n\treturn merge(\n\t\tawait mergeSort(unsorted.slice(0, middle)),\n\t\tawait mergeSort(unsorted.slice(middle))\n\t)\n}\n\n// Less efficient and slightly modified to handle drawing properly\nasync function merge(\n\tleft: SortingRect[],\n\tright: SortingRect[]\n): Promise<SortingRect[]> {\n\tconst resultSortingArray: SortingRect[] = []\n\tlet leftIndex = 0\n\tlet rightIndex = 0\n\n\twhile (leftIndex < left.length && rightIndex < right.length) {\n\t\tif (left[leftIndex].height < right[rightIndex].height) {\n\t\t\tresultSortingArray.push(left[leftIndex])\n\t\t\tleftIndex++\n\t\t} else {\n\t\t\tresultSortingArray.push(right[rightIndex])\n\t\t\trightIndex++\n\t\t}\n\t}\n\n\t// merge based on height\n\tconst combinedArray = [\n\t\t...resultSortingArray,\n\t\t...left.slice(leftIndex),\n\t\t...right.slice(rightIndex)\n\t]\n\n\t// get all the x values of the current array and sort them and then set the merged contents above.\n\tconst combinedXArray = combinedArray\n\t\t.map((rect) => {\n\t\t\teraseRectangleByObject(rect)\n\t\t\treturn { x: rect.x, frequency: rect.frequency }\n\t\t})\n\t\t.sort((a, b) => a.x - b.x)\n\n\tfor (let n = 0; n < combinedXArray.length; n++) {\n\t\tcombinedArray[n].x = combinedXArray[n].x\n\t\tcombinedArray[n].frequency = combinedXArray[n].frequency\n\t}\n\n\t// gets an array of the index value of where the subarray is from the main array\n\tconst indexArray: number[] = []\n\tconst xValues = combinedArray.map((rect) => rect.height)\n\n\txValues.forEach((xValue) => {\n\t\tindexArray.push(\n\t\t\tsortingArray.findIndex(\n\t\t\t\t(rect) =>\n\t\t\t\t\trect.height ===\n\t\t\t\t\tcombinedArray[xValues.findIndex((x) => x === xValue)].height\n\t\t\t)\n\t\t)\n\t})\n\n\t// drawing of the rectangles\n\tfor (let n = 0; n < combinedArray.length; n++) {\n\t\tif (algorithm.stopExecution) {\n\t\t\treturn []\n\t\t}\n\t\tawait redrawRectangle(indexArray[n])\n\t}\n\n\treturn combinedArray\n}\n\nasync function heapSort() {\n\tfor (let n = Math.floor(sortingArray.length / 2 - 1); n >= 0; n--) {\n\t\tif (algorithm.stopExecution) {\n\t\t\treturn\n\t\t}\n\n\t\tawait heapify(sortingArray.length, n)\n\t}\n\n\tfor (let n = sortingArray.length - 1; n >= 0; n--) {\n\t\tif (algorithm.stopExecution) {\n\t\t\treturn\n\t\t}\n\n\t\tawait redrawRectangles(0, n)\n\t\tawait heapify(n, 0)\n\t}\n}\n\nasync function heapify(size: number, index: number) {\n\tlet max = index\n\tconst left = 2 * index + 1\n\tconst right = 2 * index + 2\n\n\tif (algorithm.stopExecution) {\n\t\treturn\n\t}\n\n\tif (left < size && sortingArray[left].height > sortingArray[max].height) {\n\t\tmax = left\n\t}\n\n\tif (right < size && sortingArray[right].height > sortingArray[max].height) {\n\t\tmax = right\n\t}\n\n\tif (max != index) {\n\t\tawait redrawRectangles(index, max)\n\t\tawait heapify(size, max)\n\t}\n}\n\nasync function shellSort() {\n\tlet n = 0,\n\t\tx = 0\n\n\tfor (\n\t\tlet gap = Math.floor(sortingArray.length / 2);\n\t\tgap > 0;\n\t\tgap = Math.floor(gap / 2)\n\t) {\n\t\tfor (x = gap; x < sortingArray.length; x += 1) {\n\t\t\tconst temp = sortingArray[x]\n\n\t\t\tfor (\n\t\t\t\tn = x;\n\t\t\t\tn >= gap && sortingArray[n - gap].height > temp.height;\n\t\t\t\tn -= gap\n\t\t\t) {\n\t\t\t\tif (algorithm.stopExecution) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tawait redrawRectangles(n, n - gap)\n\t\t\t}\n\n\t\t\tsortingArray[n].x = temp.x\n\t\t\tsortingArray[n] = temp\n\t\t}\n\t}\n}\n\nasync function gnomeSort() {\n\tfor (let n = 1; n < sortingArray.length; n++) {\n\t\tif (sortingArray[n - 1].height > sortingArray[n].height) {\n\t\t\twhile (n > 0 && sortingArray[n - 1].height > sortingArray[n].height) {\n\t\t\t\tif (algorithm.stopExecution) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tawait redrawRectangles(n, n - 1)\n\t\t\t\tn--\n\t\t\t}\n\t\t}\n\t}\n}\n\nasync function bogoSort() {\n\tfunction isNotSorted() {\n\t\tfor (let n = 1; n < sortingArray.length; n++) {\n\t\t\tif (sortingArray[n - 1].height > sortingArray[n].height) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\n\tasync function redrawAllRectangles() {\n\t\tfor (let n = 0; n < Number(algorithm.numberOfRectangles); n++) {\n\t\t\teraseRectangle(n)\n\t\t}\n\n\t\tfor (let n = 0; n < Number(algorithm.numberOfRectangles); n++) {\n\t\t\trandomSwaps()\n\t\t}\n\n\t\tfor (let n = 0; n < Number(algorithm.numberOfRectangles); n++) {\n\t\t\tawait redrawRectangle(n)\n\t\t}\n\t}\n\n\twhile (isNotSorted()) {\n\t\tif (algorithm.stopExecution) {\n\t\t\treturn\n\t\t}\n\t\tawait redrawAllRectangles()\n\t}\n}\n</script>\n\n<template>\n\t<canvas id=\"canvas\" class=\"w-[calc(100vw_-_288px)]\"></canvas>\n</template>\n","<script setup lang=\"ts\">\nimport type { SortingAlgorithm } from '#types'\nimport { ref, watch } from 'vue'\nimport SortingVisualization from './subcomponents/SortingVisualization.vue'\n\n// TODO:\n// Convert drawing to be microTasks to improve rendering speed\n// Show time to draw and time to execute\n// Show array accesses?\n// Show swaps?\n// Add implementations of WebGL and WebGL2 rendering and a switch for each\n\n// Public\nconst sleepTime = ref<number | string>(0)\nconst volume = ref(0.025)\nconst stopExecution = ref(false)\nconst randomizeArray = ref(false)\nconst disableStopButton = ref(true)\nconst numberOfRectangles = ref<number | string>(100)\nconst disableSortButtons = ref(false)\nconst disableRandomizeButton = ref(false)\nconst disableRectangleSlider = ref(false)\n// executionTime = ref(0),\nconst oscillator = ref<OscillatorNode>()\nconst sortingMethod = ref<SortingAlgorithm>('')\n// prettier-ignore\nconst sorts = ref<SortingAlgorithm[]>([\n\t'Bubble', 'Insertion', 'Cocktail Shaker', 'Selection',\n\t'Merge', 'Quick', 'Heap', 'Shell', 'Gnome', 'Bogo'\n])\n\n// Private\nlet audioContext!: AudioContext\nlet audioIntialized = false\nlet gainNode!: GainNode\n// let timestamp = 0\n\n// Watchers\nwatch(numberOfRectangles, () => {\n\tintializeAudio()\n\tdisableSortButtons.value = true\n})\n\nwatch(volume, () => {\n\tintializeAudio()\n\tif (disableSortButtons.value) {\n\t\toscillator.value?.disconnect()\n\t\tgainNode.gain.setValueAtTime(volume.value, audioContext.currentTime)\n\t\toscillator.value?.connect(gainNode).connect(audioContext.destination)\n\t} else {\n\t\tgainNode.gain.setValueAtTime(volume.value, audioContext.currentTime)\n\t}\n})\n\nasync function stop(): Promise<void> {\n\tstopExecution.value = true\n\toscillator.value?.disconnect()\n\tawait sleep(500) // easy safe way to ensure all operations are done\n\tstopExecution.value = false\n\toscillator.value?.disconnect()\n\tsortingMethodEndedBools()\n}\n\n// TODO: sorting methods to add\n// radix (LSD)\n// radix (MSD)\n// std::sort (intro sort)\n// std::stable_sort (adaptive merge sort)\n// bitonic\n// comb\n// binary insertion\n// tim\n// Quad\n// smooth\n// odd even\n\nfunction sleep(time: number) {\n\treturn new Promise((s) => setTimeout(s, time))\n}\n\nfunction sortingMethodStarted() {\n\tintializeAudio()\n\toscillator.value?.connect(gainNode).connect(audioContext.destination)\n\tsortingMethodStartedBools()\n}\n\nfunction sortingMethodEnded() {\n\tsortingMethod.value = ''\n\toscillator.value?.disconnect()\n\tsortingMethodEndedBools()\n}\n\nfunction sortingMethodStartedBools() {\n\tdisableRectangleSlider.value = true\n\tdisableRandomizeButton.value = true\n\tdisableSortButtons.value = true\n\tdisableStopButton.value = false\n}\n\nfunction sortingMethodEndedBools() {\n\tdisableRectangleSlider.value = false\n\tdisableRandomizeButton.value = false\n\tdisableSortButtons.value = false\n\tdisableStopButton.value = true\n}\n\n// // // // // // //\n// Audio Functions\n// // // // // // //\nfunction intializeAudio() {\n\tif (audioIntialized) return\n\n\taudioContext = new AudioContext()\n\n\tgainNode = new GainNode(audioContext, {\n\t\tgain: volume.value\n\t})\n\n\toscillator.value = new OscillatorNode(audioContext, {\n\t\ttype: 'sine',\n\t\tfrequency: 500\n\t})\n\n\toscillator.value.start()\n\toscillator.value.connect(audioContext.destination)\n\toscillator.value.disconnect()\n\taudioIntialized = true\n}\n\nfunction beep(frequency: number) {\n\toscillator.value?.frequency.setValueAtTime(\n\t\tfrequency,\n\t\taudioContext.currentTime\n\t)\n}\n\nfunction audioForRandomizing() {\n\tintializeAudio()\n\toscillator.value?.connect(gainNode).connect(audioContext.destination)\n\tbeep(300)\n}\n</script>\n\n<template>\n\t<div class=\"flex h-[calc(100vh_-_64px)]\">\n\t\t<div class=\"flex flex-col justify-center items-center gap-2 w-72\">\n\t\t\t<div class=\"flex gap-1\">\n\t\t\t\t<button\n\t\t\t\t\tclass=\"tw-button h-[50px] w-[130px] p-0\"\n\t\t\t\t\t:disabled=\"disableStopButton\"\n\t\t\t\t\t@click=\"stop\"\n\t\t\t\t>\n\t\t\t\t\tStop Execution\n\t\t\t\t</button>\n\n\t\t\t\t<button\n\t\t\t\t\tclass=\"tw-button h-[50px] w-[130px] p-0\"\n\t\t\t\t\t:disabled=\"disableRandomizeButton\"\n\t\t\t\t\t@click=\"randomizeArray = true\"\n\t\t\t\t>\n\t\t\t\t\tRandomize\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t<div class=\"flex flex-col\">\n\t\t\t\t<div>\n\t\t\t\t\tVolume: {{ parseFloat((volume * 5 * 100).toFixed(1)) }}%\n\t\t\t\t\t<input\n\t\t\t\t\t\tv-model=\"volume\"\n\t\t\t\t\t\tclass=\"w-64 h-6 bg-transparent\"\n\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\tmin=\"0\"\n\t\t\t\t\t\tmax=\"0.2\"\n\t\t\t\t\t\tstep=\"0.0001\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\tAdd extra Delay of: {{ sleepTime }}ms\n\t\t\t\t\t<input\n\t\t\t\t\t\tv-model=\"sleepTime\"\n\t\t\t\t\t\tclass=\"w-64 h-6 bg-transparent\"\n\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\tmin=\"0\"\n\t\t\t\t\t\tmax=\"250\"\n\t\t\t\t\t\tstep=\"5\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t{{ numberOfRectangles }} Rectangles\n\t\t\t\t\t<input\n\t\t\t\t\t\tv-model=\"numberOfRectangles\"\n\t\t\t\t\t\tclass=\"w-64 h-6 bg-transparent\"\n\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\tmin=\"5\"\n\t\t\t\t\t\tmax=\"1000\"\n\t\t\t\t\t\tstep=\"5\"\n\t\t\t\t\t\t:disabled=\"disableRectangleSlider\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div class=\"flex flex-wrap justify-center gap-1\">\n\t\t\t\t<button\n\t\t\t\t\tv-for=\"(algorithm, index) in sorts\"\n\t\t\t\t\t:key=\"index\"\n\t\t\t\t\tclass=\"tw-button h-[50px] w-[130px] p-0\"\n\t\t\t\t\t:disabled=\"disableSortButtons\"\n\t\t\t\t\t@click=\"sortingMethod = algorithm\"\n\t\t\t\t>\n\t\t\t\t\t{{ algorithm }}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<SortingVisualization\n\t\t\t:algorithm=\"{\n\t\t\t\tsleepTime: sleepTime,\n\t\t\t\tstopExecution: stopExecution,\n\t\t\t\trandomizeArray: randomizeArray,\n\t\t\t\toscillator: oscillator!,\n\t\t\t\tnumberOfRectangles: numberOfRectangles,\n\t\t\t\tsortingMethod: sortingMethod\n\t\t\t}\"\n\t\t\t@sorting-method-started-bools=\"sortingMethodStartedBools\"\n\t\t\t@sorting-method-ended-bools=\"sortingMethodEndedBools\"\n\t\t\t@sorting-method-started=\"sortingMethodStarted\"\n\t\t\t@audio-for-randomizing=\"audioForRandomizing\"\n\t\t\t@sorting-method-ended=\"sortingMethodEnded\"\n\t\t\t@randomize-array-done=\"randomizeArray = false\"\n\t\t\t@beep=\"beep\"\n\t\t/>\n\t</div>\n</template>\n"],"names":["emit","__emit","Context2d","Canvas","sortingArray","quickSortIndex","watch","__props","newValue","createUnsortedArray","drawAllRectangles","bubbleSort","cocktailShakerSort","heapSort","insertionSort","mergeSort","quickSort","selectionSort","shellSort","gnomeSort","bogoSort","onMounted","fixDpi","swapArrayElements","index1","index2","widthOfRect","heightOfRect","lowFrequencyBound","frequencyIncrease","n","randomSwaps","firstElementIndex","secondElementIndex","drawRectangle","sleep","redrawRectangles","firstIndex","secondIndex","eraseRectangle","redrawRectangle","index","microTask","fillRect","eraseRectangleByObject","rect","time","s","length","swapped","count","j","current","i","minHeight","x","sorted","left","right","quicksortPartition","pivot","unsorted","middle","merge","resultSortingArray","leftIndex","rightIndex","combinedArray","combinedXArray","a","b","indexArray","xValues","xValue","heapify","size","max","gap","temp","isNotSorted","redrawAllRectangles","sleepTime","ref","volume","stopExecution","randomizeArray","disableStopButton","numberOfRectangles","disableSortButtons","disableRandomizeButton","disableRectangleSlider","oscillator","sortingMethod","sorts","audioContext","audioIntialized","gainNode","intializeAudio","stop","sortingMethodEndedBools","sortingMethodStarted","sortingMethodStartedBools","sortingMethodEnded","beep","frequency","audioForRandomizing"],"mappings":"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"}